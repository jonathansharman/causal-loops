import Graphics2D;
import TwoCansAlpha4;

// A tile in a level.
class Tile {
	// The level this object is in.
	field level;
	// Row-column position.
	field position;

	constructor(level, position) {
		this.level = level;
		this.position = position;
	}

	function evictTowards(object, direction) {
		this.level.objects[this.position[0]][this.position[1]] = null;
	}

	function isValidSummonTarget() {
		return true;
	}
}

class Floor : Tile {
	constructor(level, position) : base(level, position) {}

	function draw() {
		xy = this.level.rowColToXY(this.position[0], this.position[1]);
		this.level.drawTile(Images.get("images/floor.png"), xy[0], xy[1]);
	}

	function acceptFrom(object, direction) {
		return object.enterFloor(this, direction);
	}
}

class Wall : Tile {
	constructor(level, position) : base(level, position) {}

	function draw() {
		xy = this.level.rowColToXY(this.position[0], this.position[1]);
		this.level.drawTile(Images.get("images/wall.png"), xy[0], xy[1]);
	}

	function acceptFrom(object, direction) {
		return object.enterWall(this, direction);
	}

	function isValidSummonTarget() {
		return false;
	}
}

class Blank : Wall {
	constructor(level, position) : base(level, position) {}

	function draw() {}
}

class Ice : Tile {
	constructor(level, position) : base(level, position) {}

	function draw() {
		xy = this.level.rowColToXY(this.position[0], this.position[1]);
		this.level.drawTile(Images.get("images/ice.png"), xy[0], xy[1]);
	}

	function acceptFrom(object, direction) {
		return object.enterIce(this, direction);
	}
}

class Hole : Tile {
	constructor(level, position) : base(level, position) {}

	function draw() {
		xy = this.level.rowColToXY(this.position[0], this.position[1]);
		this.level.drawTile(Images.get("images/hole.png"), xy[0], xy[1]);
	}

	function acceptFrom(object, direction) {
		return object.enterHole(this, direction);
	}
}

class Stairs : Tile {
	constructor(level, position) : base(level, position) {}

	function draw() {
		xy = this.level.rowColToXY(this.position[0], this.position[1]);
		this.level.drawTile(Images.get("images/stairs.png"), xy[0], xy[1]);
	}

	function acceptFrom(object, direction) {
		return object.enterStairs(this, direction);
	}
}

class Door : Tile {
	field idx = 0;

	constructor(idx, level, position) : base(level, position) {
		this.idx = idx;
	}

	function open() {
		return this.level.doors[this.idx] == 0 || this.level.objects[this.position[0]][this.position[1]] != null;
	}

	function draw() {
		xy = this.level.rowColToXY(this.position[0], this.position[1]);
		image = this.open() ? Images.get("images/floor.png") : Images.get("images/wall.png");
		this.level.drawTile(image, xy[0], xy[1]);
	}

	function isValidSummonTarget() {
		return this.open();
	}

	function acceptFrom(object, direction) {
		return this.open()
			? object.enterFloor(this, direction)
			: object.enterWall(this, direction)
			;
	}
}

class PressureSwitch : Tile {
	field doorIdx;

	constructor(doorIdx, level, position) : base(level, position) {
		this.doorIdx = doorIdx;
	}

	function draw() {
		xy = this.level.rowColToXY(this.position[0], this.position[1]);
		this.level.drawTile(Images.get("images/floor.png"), xy[0], xy[1]);
		button_size = this.level.tileSize / 2.0;
		switch (this.doorIdx) {
			case 0:
				color = [255, 0, 0];
				break;
			case 1:
				color = [0, 255, 0];
				break;
			case 2:
				color = [0, 0, 255];
				break;
		}
		Graphics2D.Draw.ellipse
			( xy[0] + (this.level.tileSize - button_size + 1.0) / 2.0
			, xy[1] + (this.level.tileSize - button_size + 1.0) / 2.0
			, button_size, button_size
			, color[0], color[1], color[2]
			);
	}

	function acceptFrom(object, direction) {
		if (object.enterFloor(this, direction)) {
			--this.level.doors[this.doorIdx];
			return true;
		} else {
			return false;
		}
	}

	function evictTowards(object, direction) {
		++this.level.doors[this.doorIdx];
		this.level.objects[this.position[0]][this.position[1]] = null;
	}
}

class SunkenCrate : Floor {
	constructor(level, position) : base(level, position) {}

	function draw() {
		xy = this.level.rowColToXY(this.position[0], this.position[1]);
		this.level.drawTile(Images.get("images/sunken-crate.png"), xy[0], xy[1]);
	}
}

class TrappedCharacter : Floor {
	constructor(level, position) : base(level, position) {}

	function draw() {
		xy = this.level.rowColToXY(this.position[0], this.position[1]);
		this.level.drawTile(Images.get("images/trapped-character.png"), xy[0], xy[1]);
	}
}
