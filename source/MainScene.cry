import Graphics2D;
import Graphics2DText;
import TwoCansAlpha4;

const X_RES = 640;
const Y_RES = 480;
enum Direction { UP, DOWN, LEFT, RIGHT }

class MainScene : AbstractScene {
	static field levelNames =
		[ "free-the-prisoner"
		, "bridge-the-gap"
		, "diodes"
		, "four-holes"
		, "hockey"
		, "ice-rink"
		, "ice-switches"
		, "test-1"
		];

	field levelIdx;
	field level;

	constructor(levelIdx = 0) : base() {
		this.levelIdx = levelIdx % MainScene.levelNames.length;
		this.level = new Level("levels/" + MainScene.levelNames[this.levelIdx] + ".txt");
	}

	function update(inputManager, events) {
		// Skip levels.
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.NUM_1)) {
			this.switchScene(new MainScene(this.levelIdx - 1));
			return;
		}
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.NUM_2)) {
			this.switchScene(new MainScene(this.levelIdx + 1));
			return;
		}

		// Check for manual level reset.
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.ESCAPE)) {
			print("Defeat!");
			this.switchScene(new MainScene(this.levelIdx));
			return;
		}

		// Update the level.
		this.level.update(inputManager, events);

		// Check for logical inconsistency.
		if (!this.level.consistent) {
			print("Contradiction!");
			this.switchScene(new MainScene(this.levelIdx));
			return;
		}

		// Check for victory.
		if (this.level.characterCount == 0 && this.level.returnPoints.length == 0) {
			print("Victory!");
			this.switchScene(new MainScene(this.levelIdx + 1));
			return;
		}
	}

	function render() {
		Graphics2D.Draw.fill(0, 0, 0);

		this.level.draw();
	}
}
