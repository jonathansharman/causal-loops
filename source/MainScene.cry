import Graphics2D;
import Graphics2DText;
import TwoCansAlpha4;

const X_RES = 640;
const Y_RES = 480;
enum Direction { UP, DOWN, LEFT, RIGHT }

class MainScene : AbstractScene {
	field levelIdx;
	field level;

	static function getLevel(levelIdx) {
		switch (levelIdx) {
			case 0:
				return new Level("levels/free-the-prisoner.txt");
				break;
			case 1:
				return new Level("levels/bridge-the-gap.txt");
				break;
			case 2:
				return new Level("levels/diodes.txt");
				break;
			case 3:
				return new Level("levels/hockey.txt");
				break;
			case 4:
				return new Level("levels/ice-rink.txt");
				break;
			case 5:
				return new Level("levels/ice-switches.txt");
				break;
			default:
				return new Level("levels/test-1.txt");
				break;
		}
	}

	constructor(levelIdx = 0) : base() {
		this.levelIdx = levelIdx;
		this.level = MainScene.getLevel(this.levelIdx);
	}

	function update(inputManager, events) {
		// Skip levels.
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.NUM_1)) {
			this.switchScene(new MainScene(this.levelIdx - 1));
			return;
		}
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.NUM_2)) {
			this.switchScene(new MainScene(this.levelIdx + 1));
			return;
		}

		// Check for manual level reset.
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.ESCAPE)) {
			print("Defeat!");
			this.switchScene(new MainScene(this.levelIdx));
			return;
		}

		// Update the level.
		this.level.update(inputManager, events);

		// Check for logical inconsistency.
		if (!this.level.consistent) {
			print("Contradiction!");
			this.switchScene(new MainScene(this.levelIdx));
			return;
		}

		// Check for victory.
		if (this.level.characterCount == 0 && this.level.returnPoints.length == 0) {
			print("Victory!");
			this.switchScene(new MainScene(this.levelIdx + 1));
			return;
		}
	}

	function render() {
		Graphics2D.Draw.fill(0, 0, 0);

		this.level.draw();
	}
}
