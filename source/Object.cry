import Graphics2D;
import TwoCansAlpha4;

// An object in a level.
class Object {
	// The level this object is in.
	field level;
	// Row-column position.
	field position;
	// Used for pushing.
	field momentum = 0;

	constructor(level, position) {
		this.level = level;
		this.position = position;
	}

	// Pushes this object towards "direction", along with anything in the way, if "strength" >= # of objects to push.
	function push(direction) {
		// Can't push without momentum.
		if (this.momentum == 0) return false;

		// Get neighboring position.
		neighborPosition = this.level.neighbor(this.position, direction);

		// Push neighbor, if any.
		neighbor = this.level.objects[neighborPosition[0]][neighborPosition[1]];
		if (neighbor != null) {
			neighbor.momentum = this.momentum - 1;
			if (!neighbor.push(direction)) {
				// Too much stuff in the way.
				return false;
			}
		}

		// Try to push this.
		currentTile = this.level.tiles[this.position[0]][this.position[1]];
		neighborTile = this.level.tiles[neighborPosition[0]][neighborPosition[1]];
		if (neighborTile.acceptFrom(this, direction)) {
			currentTile.evictTowards(this, direction);
			return true;
		} else {
			return false;
		}
	}

	function enterFloor(floor, direction) {
		this.level.objects[floor.position[0]][floor.position[1]] = this;
		this.position = floor.position;
		return true;
	}

	function enterWall(floor, direction) {
		return false;
	}

	function enterIce(floor, direction) {
		this.level.objects[floor.position[0]][floor.position[1]] = this;
		this.position = floor.position;
		if (direction != null) {
			this.push(direction);
		}
		return true;
	}

	function enterStairs(floor, direction) {
		this.level.objects[floor.position[0]][floor.position[1]] = this;
		this.position = floor.position;
		return true;
	}

	function enterElectricFloor(floor, direction) {
		this.level.objects[floor.position[0]][floor.position[1]] = this;
		this.position = floor.position;
		return true;
	}
}

// A pushable crate.
class Crate : Object {
	constructor(level, position) : base(level, position) {}

	function draw() {
		xy = this.level.rowColToXY(this.position[0], this.position[1]);
		this.level.drawTile(Images.get("images/crate.png"), xy[0], xy[1]);
	}

	function enterHole(hole, direction) {
		this.level.tiles[hole.position[0]][hole.position[1]] = new SunkenCrate(this.level, hole.position);
		return true;
	}
}

// A pushable, slidable block of ice.
class IceBlock : Object {
	constructor(level, position) : base(level, position) {}

	function draw() {
		xy = this.level.rowColToXY(this.position[0], this.position[1]);
		this.level.drawTile(Images.get("images/ice-block.png"), xy[0], xy[1]);
	}

	function enterFloor(floor, direction) {
		this.level.objects[floor.position[0]][floor.position[1]] = this;
		this.position = floor.position;
		this.push(direction);
		return true;
	}

	function enterIce(ice, direction) {
		this.level.objects[ice.position[0]][ice.position[1]] = this;
		this.position = ice.position;
		this.push(direction);
		return true;
	}

	function enterHole(hole, direction) {
		this.level.tiles[hole.position[0]][hole.position[1]] = new Ice(this.level, hole.position);
		return true;
	}

	function enterElectricFloor(electricFloor, direction) {
		this.level.objects[electricFloor.position[0]][electricFloor.position[1]] = this;
		this.position = electricFloor.position;
		this.push(direction);
		return true;
	}
}
